{"ast":null,"code":"var _jsxFileName = \"/Users/Pavel/Documents/\\u0443\\u0447\\u0435\\u0308\\u0431\\u0430/\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435/\\u0424\\u0430\\u0438\\u0306\\u043B\\u044B/Books/client/src/components/reader/reader.jsx\";\nimport React from 'react';\nimport Header from '../header/header';\nimport Footer from '../footer/footer';\nimport { useParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Chapter from '../chapter/chapter';\nimport TableOfContents from '../table-of-contents/table-of-contents';\nimport { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { AppRoute, MAX_NUMBER_BUTTONS } from '../../common/const';\nimport { ButtonTypes } from '../../common/const';\nimport { getBookReader, getBook } from '../../common/utils.js';\nimport { fetchBookReader } from \"../../store/api-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Reader = props => {\n  const {\n    onReaderDataRender,\n    activeBookId,\n    reader,\n    fontSize\n  } = props;\n  /* useEffect(() => {\n    onReaderDataRender(activeBookId)\n    },[activeBookId]);\n  */\n\n  /* const {\n    chapters,\n    book\n  } = reader; */\n\n  /* const chaptersNumbers = Array.from(new Set(reader.map((chapter) => chapter.id)));\n  const [selectForm, setSelectForm] = useState ({\n  value: 1,\n  });\n  const handleChapterChange = (evt) => {\n  const {value} = evt.target;\n  setSelectForm({...selectForm, value});\n  }; */\n\n  /* const index = selectForm.value;\n  const chapter = reader[index - 1];\n  const {\n    chapterTitle\n  } = chapter\n  \n  const handleGoBackChapter = () => {\n      const {value} = [value - 1];\n      setSelectForm({...selectForm, value});\n  };\n  \n  \n  const [rangeForm, setRangeForm] = useState ({\n      value: 14,\n    });\n  \n  const handleFontSizeChange = (evt) => {\n      const {value} = evt.target;\n      setRangeForm({...rangeForm, value});\n    };\n  \n    const font=rangeForm.value;\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page light-theme\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 2\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"up-button\",\n        type: \"button\",\n        children: [\"\\u2191\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"\\u041D\\u0430\\u0432\\u0435\\u0440\\u0445\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_c = Reader;\n\nconst mapStateToProps = state => ({\n  reader: state.reader,\n  activeBookId: state.activeBookId,\n  fontSize: state.fontSize\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onReaderDataRender(id) {\n    dispatch(fetchBookReader(id));\n  }\n\n});\n\nexport { Reader };\nexport default connect(mapStateToProps, mapDispatchToProps)(Reader);\n\nvar _c;\n\n$RefreshReg$(_c, \"Reader\");","map":{"version":3,"names":["React","Header","Footer","useParams","Link","Chapter","TableOfContents","useState","useEffect","connect","AppRoute","MAX_NUMBER_BUTTONS","ButtonTypes","getBookReader","getBook","fetchBookReader","Reader","props","onReaderDataRender","activeBookId","reader","fontSize","mapStateToProps","state","mapDispatchToProps","dispatch","id"],"sources":["/Users/Pavel/Documents/учёба/Программирование/Файлы/Books/client/src/components/reader/reader.jsx"],"sourcesContent":["import React from 'react';\nimport Header from '../header/header';\nimport Footer from '../footer/footer';\nimport {useParams} from 'react-router-dom';\nimport {Link} from 'react-router-dom';\nimport Chapter from '../chapter/chapter';\nimport TableOfContents  from '../table-of-contents/table-of-contents';\nimport {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {AppRoute, MAX_NUMBER_BUTTONS} from '../../common/const';\nimport {ButtonTypes} from '../../common/const';\nimport {getBookReader, getBook} from '../../common/utils.js';\nimport {fetchBookReader} from \"../../store/api-actions\";\n\nconst Reader = (props) => {\n\n    const {\n        onReaderDataRender,\n        activeBookId,\n        reader,\n        fontSize,\n      } = props;\n\n  /* useEffect(() => {\n    onReaderDataRender(activeBookId)\n    },[activeBookId]);\n */\n  /* const {\n    chapters,\n    book\n  } = reader; */\n  /* const chaptersNumbers = Array.from(new Set(reader.map((chapter) => chapter.id)));\n\nconst [selectForm, setSelectForm] = useState ({\n  value: 1,\n});\n\nconst handleChapterChange = (evt) => {\n  const {value} = evt.target;\n  setSelectForm({...selectForm, value});\n}; */\n\n/* const index = selectForm.value;\nconst chapter = reader[index - 1];\nconst {\n  chapterTitle\n} = chapter\n\nconst handleGoBackChapter = () => {\n    const {value} = [value - 1];\n    setSelectForm({...selectForm, value});\n};\n\n\nconst [rangeForm, setRangeForm] = useState ({\n    value: 14,\n  });\n\nconst handleFontSizeChange = (evt) => {\n    const {value} = evt.target;\n    setRangeForm({...rangeForm, value});\n  };\n\n  const font=rangeForm.value;\n */\n return (\n  <>\n<div className=\"page light-theme\">\n\t<div className=\"main\">\n  <Header />\n    \n    {/* <div className=\"breadcrumbs\">\n\t\t<Link to={AppRoute.MAIN}>Главная</Link>\n\t\t<Link to={getBook(activeBookId)}>{book.title}</Link>\n\t\t<Link className=\"active\" to={getBookReader(activeBookId)}>{chapterTitle}</Link>\n\t  </div>\n\n    <div className=\"reader\">\n        <div className=\"controls\">\n            <div className=\"settings contents\">\n                <label>Оглавление:\n                    <select name=\"content\" onChange={handleChapterChange}>\n                        <TableOfContents chapters={reader} />\n                    </select>\n                </label>\n            </div>\n        <div className=\"settings size\">\n            <label> Размер текста: (<output name=\"pixels\" className=\"pixels\">{`${rangeForm.value}`}</output>px)\n                <input name=\"sizesetting\" className=\"size-setting\" type=\"range\" min=\"8\" max=\"48\" step=\"1\" value={rangeForm.value} onChange={handleFontSizeChange}/>\n            </label>          \n        </div>\n    </div>\n\n        <div className=\"paginator\">\n            <ul>\n                <li className={ButtonTypes.GO_BACK} onClick={handleGoBackChapter}>\n                    <a href=\"#prev\">Назад</a>\n                </li>\n                {chaptersNumbers.slice(0, MAX_NUMBER_BUTTONS).map((id) => {\n                  return (\n                    <li className={ButtonTypes.TURN_PAGE} key={id}>\n                      <a href=\"#1\">{id}</a>\n                    </li>\n                  );\n                })}\n                <li className={ButtonTypes.GO_FORWARD}>\n                    <a href=\"#next\">Вперёд</a>\n                </li>\n            </ul>\n        </div>\n            <Chapter chapters={reader}  index={index} font={font}/>\n    </div> */}\n    \n\n<Footer />\n\n</div>\n<button className=\"up-button\" type=\"button\">\n    ↑\n    <span className=\"visually-hidden\">Наверх</span>\n  </button>\n</div>\n</>\n );\n};\n\nconst mapStateToProps = (state) => ({\n    reader: state.reader,\n    activeBookId: state.activeBookId,\n    fontSize: state.fontSize,\n  });\n  \n  const mapDispatchToProps = (dispatch) => ({\n    onReaderDataRender(id) {\n      dispatch(fetchBookReader(id));\n    },\n  });\n\nexport {Reader};\nexport default connect(mapStateToProps, mapDispatchToProps)(Reader);"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,eAAP,MAA6B,wCAA7B;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,EAAkBC,kBAAlB,QAA2C,oBAA3C;AACA,SAAQC,WAAR,QAA0B,oBAA1B;AACA,SAAQC,aAAR,EAAuBC,OAAvB,QAAqC,uBAArC;AACA,SAAQC,eAAR,QAA8B,yBAA9B;;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;EAEtB,MAAM;IACFC,kBADE;IAEFC,YAFE;IAGFC,MAHE;IAIFC;EAJE,IAKAJ,KALN;EAOF;AACF;AACA;AACA;;EACE;AACF;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACC,oBACC;IAAA,uBACF;MAAK,SAAS,EAAC,kBAAf;MAAA,wBACC;QAAK,SAAS,EAAC,MAAf;QAAA,wBACC,QAAC,MAAD;UAAA;UAAA;UAAA;QAAA,QADD,eA8CD,QAAC,MAAD;UAAA;UAAA;UAAA;QAAA,QA9CC;MAAA;QAAA;QAAA;QAAA;MAAA,QADD,eAkDA;QAAQ,SAAS,EAAC,WAAlB;QAA8B,IAAI,EAAC,QAAnC;QAAA,kCAEI;UAAM,SAAS,EAAC,iBAAhB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAlDA;IAAA;MAAA;MAAA;MAAA;IAAA;EADE,iBADD;AA2DA,CA9GD;;KAAMD,M;;AAgHN,MAAMM,eAAe,GAAIC,KAAD,KAAY;EAChCH,MAAM,EAAEG,KAAK,CAACH,MADkB;EAEhCD,YAAY,EAAEI,KAAK,CAACJ,YAFY;EAGhCE,QAAQ,EAAEE,KAAK,CAACF;AAHgB,CAAZ,CAAxB;;AAME,MAAMG,kBAAkB,GAAIC,QAAD,KAAe;EACxCP,kBAAkB,CAACQ,EAAD,EAAK;IACrBD,QAAQ,CAACV,eAAe,CAACW,EAAD,CAAhB,CAAR;EACD;;AAHuC,CAAf,CAA3B;;AAMF,SAAQV,MAAR;AACA,eAAeP,OAAO,CAACa,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CR,MAA7C,CAAf"},"metadata":{},"sourceType":"module"}